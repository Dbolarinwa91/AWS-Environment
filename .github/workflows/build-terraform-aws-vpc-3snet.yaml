name: AWS-terraform-1-vpc-3-subnet
on:
  push:
    branches:
      - main

permissions:
  id-token: write # Required for AWS OIDC connection
  contents: read # Required for actions/checkout
  pull-requests: write # Required for GitHub bot to comment on PR
  issues: write # Required for posting plan results as issue comments

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TERRAFORM_VERSION: 1.11.0

jobs:
  terraform:
    name: 'AWS-terraform-1-vpc-3-subnet'
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: .
    
    steps:
    # 🔍 PREPARATION PHASE - Repository checkout and environment setup
    - name: 🔍 Checkout repository
      uses: actions/checkout@v4
      id: checkout
    
    - name: 🔧 Setup Terraform
      uses: hashicorp/setup-terraform@v2
      id: setup
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: 🔐 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      id: aws-credentials
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GitHubActions
    
    # 🚀 INITIALIZATION PHASE - Initialize and validate Terraform
    - name: 🚀 Initialize Terraform
      id: init
      working-directory: infrastructure
      run: |
        echo "::group::Terraform Initialization"
        echo "🔄 Starting Terraform initialization..."
        
        # Initialize with state migration enabled
        if terraform init -migrate-state; then
          echo "✅ Terraform initialization successful"
          echo "init_status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Terraform initialization failed"
          echo "init_status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "::endgroup::"

    - name: 🔍 Validate Terraform Configuration
      id: validate
      working-directory: infrastructure
      if: steps.init.outputs.init_status == 'success'
      run: |
        echo "::group::Terraform Validation"
        echo "🔄 Validating Terraform configuration..."
        
        # Validate Terraform configuration
        if terraform validate; then
          echo "✅ Terraform validation successful"
          echo "validate_status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Terraform validation failed"
          echo "validate_status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "::endgroup::"
    
    # 📝 PLANNING PHASE - Generate and display plan
    - name: 📝 Create Terraform Plan
      id: plan
      working-directory: infrastructure
      if: steps.validate.outputs.validate_status == 'success'
      run: |
       echo "🔄 Generating Terraform plan..."
       if terraform plan -out=./plans/tfplan.binary -detailed-exitcode -input=false ; then
        echo "✅ Terraform plan generated successfully"
        echo "plan_status=success" >> $GITHUB_OUTPUT
        echo "plan_exitcode=${PLAN_EXIT_CODE}" >> $GITHUB_OUTPUT
        else
        echo "❌ Terraform plan generation failed"


  
  