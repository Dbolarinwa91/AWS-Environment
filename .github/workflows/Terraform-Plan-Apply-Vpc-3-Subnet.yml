name: Terraform-Apply-AWS-VPC-3-Subnets
on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

permissions:
  id-token: write  # Required for AWS OIDC connection
  contents: read   # Required for actions/checkout

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TERRAFORM_VERSION: ${{ secrets.TERRAFORM_VERSION }}
  TF_WORKING_DIR: infrastructure

jobs:
  # PHASE 1: VALIDATE & PLAN
  terraform-plan:
    name: '📝 Validate & Plan'
    runs-on: ubuntu-latest
    outputs:
      plan_status: ${{ steps.plan.outputs.plan_status }}
      has_changes: ${{ steps.plan.outputs.has_changes }}
    
    steps:
      - name: 🔍 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions
      
      - name: 🚀 Initialize & Validate Terraform
        id: init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "::group::Terraform Initialization & Validation"
          echo "🔄 Starting Terraform initialization..."
          
          # Initialize with state migration enabled
          if terraform init -migrate-state; then
            echo "✅ Terraform initialization successful"
            
            # Validate Terraform configuration
            if terraform validate; then
              echo "✅ Terraform validation successful"
            else
              echo "❌ Terraform validation failed"
              exit 1
            fi
          else
            echo "❌ Terraform initialization failed"
            exit 1
          fi
          echo "::endgroup::"
      
      - name: 📝 Create Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "::group::Terraform Plan Generation"
          echo "🔄 Generating Terraform plan..."

          # Create plan directory
          mkdir -p ./plans

          # Run plan and capture output while also displaying it
          terraform plan -out=./plans/tfplan.binary -detailed-exitcode -input=false 2>&1 | tee ./plans/plan_output.txt
          PLAN_EXIT_CODE=${PIPESTATUS[0]}

          echo "✅ Terraform plan generated with exit code: ${PLAN_EXIT_CODE}"
          echo "plan_status=success" >> $GITHUB_OUTPUT
          
          # Check if there are any changes
          if [ "$PLAN_EXIT_CODE" -eq "0" ]; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          elif [ "$PLAN_EXIT_CODE" -eq "2" ]; then
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "Error during plan"
            exit 1
          fi

          # Convert binary plan to JSON for easier parsing
          terraform show -json ./plans/tfplan.binary > ./plans/tfplan.json || echo "Warning: Unable to convert plan to JSON format"

          # Create human-readable summary
          echo "## Terraform Plan Summary" > ./plans/plan_summary.md
          echo "📅 Generated on: $(date)" >> ./plans/plan_summary.md
          echo "" >> ./plans/plan_summary.md

          # Count resources being added/changed/destroyed
          PLAN_SUMMARY=$(grep "Plan:" ./plans/plan_output.txt | grep -o "Plan:.*" || echo "Plan: 0 to add, 0 to change, 0 to destroy.")
          RESOURCES_ADD=$(echo "$PLAN_SUMMARY" | grep -o "[0-9]\+ to add" | grep -o "[0-9]\+" || echo "0")
          RESOURCES_CHANGE=$(echo "$PLAN_SUMMARY" | grep -o "[0-9]\+ to change" | grep -o "[0-9]\+" || echo "0")
          RESOURCES_DESTROY=$(echo "$PLAN_SUMMARY" | grep -o "[0-9]\+ to destroy" | grep -o "[0-9]\+" || echo "0")

          # Save summary to file and print to logs
          echo "🟢 Resources to add: ${RESOURCES_ADD}" | tee -a ./plans/plan_summary.md
          echo "🟠 Resources to change: ${RESOURCES_CHANGE}" | tee -a ./plans/plan_summary.md
          echo "🔴 Resources to destroy: ${RESOURCES_DESTROY}" | tee -a ./plans/plan_summary.md
          echo "::endgroup::"
      
      - name: 📝 Upload Plan Artifacts
        uses: actions/upload-artifact@v3
        if: steps.plan.outputs.plan_status == 'success'
        with:
          name: terraform-plans
          path: ${{ env.TF_WORKING_DIR }}/plans/
          retention-days: 5

  # PHASE 2: APPLY (Only if changes detected)
  terraform-apply:
    name: '🚀 Apply Changes'
    runs-on: ubuntu-latest
    needs: terraform-plan
    if: needs.terraform-plan.outputs.has_changes == 'true'
    outputs:
      apply_status: ${{ steps.apply.outputs.apply_status }}
    
    steps:
      - name: 🔍 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-TerraformApply
      
      - name: 🚀 Initialize Terraform & Apply Changes
        id: apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "::group::Terraform Apply"
          # Initialize with state migration
          echo "🔄 Initializing Terraform..."
          terraform init -migrate-state
          
          # Apply changes
          echo "🔄 Applying Terraform changes..."
          if terraform apply -auto-approve; then
            echo "✅ Terraform apply successful"
            echo "apply_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Terraform apply failed"
            echo "apply_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"

  # PHASE 3: NOTIFICATION
  terraform-notify:
    name: '📢 Status Summary'
    runs-on: ubuntu-latest
    needs: [terraform-plan, terraform-apply]
    if: always()
    
    steps:
      - name: 📊 Workflow Summary
        run: |
          echo "## Terraform Workflow Summary" > $GITHUB_STEP_SUMMARY
          echo "📅 Run completed at: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Status by Phase:" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Validate & Plan: ${{ needs.terraform-plan.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.terraform-plan.result }}" == "success" ]]; then
            if [[ "${{ needs.terraform-plan.outputs.has_changes }}" == "true" ]]; then
              echo "  - Changes detected: YES" >> $GITHUB_STEP_SUMMARY
              echo "- 🚀 Apply: ${{ needs.terraform-apply.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
            else
              echo "  - Changes detected: NO" >> $GITHUB_STEP_SUMMARY
              echo "- 🚀 Apply: skipped (no changes)" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.terraform-apply.result }}" == "success" ]]; then
            echo "### 🟢 Infrastructure Successfully Updated" >> $GITHUB_STEP_SUMMARY
            echo "The Terraform infrastructure has been successfully applied." >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.terraform-plan.outputs.has_changes }}" == "false" && "${{ needs.terraform-plan.result }}" == "success" ]]; then
            echo "### 🟢 Infrastructure Up to Date" >> $GITHUB_STEP_SUMMARY
            echo "No changes were needed. All resources are already in the desired state." >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🔴 Workflow Completed with Issues" >> $GITHUB_STEP_SUMMARY
            echo "Please check the job logs for details on what went wrong." >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📢 Notification
        run: |
          if [[ "${{ needs.terraform-apply.result }}" == "success" ]]; then
            echo "✅ Infrastructure successfully updated!"
          elif [[ "${{ needs.terraform-plan.outputs.has_changes }}" == "false" && "${{ needs.terraform-plan.result }}" == "success" ]]; then
            echo "✅ Infrastructure is already up to date."
          elif [[ "${{ needs.terraform-plan.result }}" == "failure" ]]; then
            echo "❌ Validation or planning failed. Check logs for details."
          elif [[ "${{ needs.terraform-apply.result }}" == "failure" ]]; then
            echo "❌ Apply operation failed. Check logs for details."
          fi