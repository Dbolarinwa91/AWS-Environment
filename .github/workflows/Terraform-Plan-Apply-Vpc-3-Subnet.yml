name: Terraform-Apply-AWS-VPC-3-Subnets
on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggering

permissions:
  id-token: write  # Required for AWS OIDC connection
  contents: read   # Required for actions/checkout

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TERRAFORM_VERSION: ${{ secrets.TERRAFORM_VERSION }}
  TF_WORKING_DIR: infrastructure

jobs:
  # PHASE 1: PREPARE
  prepare:
    name: '🔍 Prepare Environment'
    runs-on: ubuntu-latest
    outputs:
      environment_ready: ${{ steps.env_check.outputs.environment_ready }}
    
    steps:
      - name: 🔍 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions
      
      - name: ✅ Verify Environment
        id: env_check
        run: |
          echo "Verifying environment setup..."
          terraform --version
          aws sts get-caller-identity
          echo "environment_ready=true" >> $GITHUB_OUTPUT

  # PHASE 2: VALIDATE
  validate:
    name: '🧪 Validate Infrastructure'
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.environment_ready == 'true'
    outputs:
      validate_status: ${{ steps.validate.outputs.validate_status }}
    
    steps:
      - name: 🔍 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions
      
      - name: 🚀 Initialize Terraform
        id: init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "::group::Terraform Initialization"
          echo "🔄 Starting Terraform initialization..."
          
          # Initialize with state migration enabled
          if terraform init -migrate-state; then
            echo "✅ Terraform initialization successful"
            echo "init_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Terraform initialization failed"
            echo "init_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"

      - name: 🔍 Validate Terraform Configuration
        id: validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        if: steps.init.outputs.init_status == 'success'
        run: |
          echo "::group::Terraform Validation"
          echo "🔄 Validating Terraform configuration..."
          
          # Validate Terraform configuration
          if terraform validate; then
            echo "✅ Terraform validation successful"
            echo "validate_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Terraform validation failed"
            echo "validate_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"

  # PHASE 3: PLAN
  plan:
    name: '📝 Plan Infrastructure Changes'
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.validate_status == 'success'
    outputs:
      plan_status: ${{ steps.plan.outputs.plan_status }}
    
    steps:
      - name: 🔍 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions
      
      - name: 🚀 Initialize Terraform
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init -migrate-state
      
      - name: 📝 Create Terraform Plan
        id: plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "::group::Terraform Plan Generation"
          echo "🔄 Generating Terraform plan..."

          # Create plan directory
          mkdir -p ./plans

          # Run plan and capture output while also displaying it
          terraform plan -out=./plans/tfplan.binary -detailed-exitcode -input=false 2>&1 | tee ./plans/plan_output.txt
          PLAN_EXIT_CODE=${PIPESTATUS[0]}

          echo "✅ Terraform plan generated with exit code: ${PLAN_EXIT_CODE}"
          echo "plan_status=success" >> $GITHUB_OUTPUT

          # Create summary markdown file
          echo "Terraform plan completed. See logs for details." >> ./plans/plan_summary.md

          echo "::endgroup::"

      - name: 📝 Upload Plan Artifacts
        uses: actions/upload-artifact@v4
        if: steps.plan.outputs.plan_status == 'success'
        with:
          name: terraform-plans
          path: ${{ env.TF_WORKING_DIR }}/plans/
          retention-days: 5

  # PHASE 4: APPLY (always run if plan succeeds)
  apply:
    name: '🚀 Apply Infrastructure Changes'
    runs-on: ubuntu-latest
    needs: plan
    if: needs.plan.outputs.plan_status == 'success'
    outputs:
      apply_status: ${{ steps.apply.outputs.apply_status }}
    
    steps:
      - name: 🔍 Checkout repository
        uses: actions/checkout@v4
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-TerraformApply
      
      - name: 🚀 Initialize Terraform
        id: init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "::group::Terraform Initialization"
          echo "🔄 Starting Terraform initialization..."
          
          if terraform init -migrate-state; then
            echo "✅ Terraform initialization successful"
          else
            echo "❌ Terraform initialization failed"
            exit 1
          fi
          echo "::endgroup::"
      
      - name: 🔄 Apply Terraform Changes
        id: apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "::group::Terraform Apply"
          echo "🔄 Applying Terraform changes..."  
          
          if terraform apply -auto-approve; then
            echo "✅ Terraform apply successful"
            echo "apply_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Terraform apply failed"
            echo "apply_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"

  # PHASE 5: NOTIFICATION
  notify:
    name: '📢 Send Notifications'
    runs-on: ubuntu-latest
    needs: [prepare, validate, plan, apply]
    if: always()
    
    steps:
      - name: 📊 Workflow Summary
        run: |
          echo "## Terraform Workflow Summary" > $GITHUB_STEP_SUMMARY
          echo "📅 Run completed at: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Status by Phase:" >> $GITHUB_STEP_SUMMARY
          echo "- 🔍 Prepare: ${{ needs.prepare.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🧪 Validate: ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📝 Plan: ${{ needs.plan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- 🚀 Apply: ${{ needs.apply.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.apply.result }}" == "success" ]]; then
            echo "### 🟢 Infrastructure Successfully Updated" >> $GITHUB_STEP_SUMMARY
            echo "The Terraform infrastructure has been successfully applied." >> $GITHUB_STEP_SUMMARY
          else
            echo "### 🔴 Workflow Completed with Issues" >> $GITHUB_STEP_SUMMARY
            echo "Please check the job logs for details on what went wrong." >> $GITHUB_STEP_SUMMARY
          fi

      - name: 📢 Notify on Success
        if: needs.apply.result == 'success'
        run: |
          echo "::group::Notification"
          echo "✅ Workflow completed successfully!"
          echo "## 🚀 Infrastructure Successfully Updated"
          echo "The Terraform infrastructure has been successfully applied."
          echo "Completed at: $(date)"
          echo "::endgroup::"
      
      - name: 📢 Notify on Failure
        if: |
          needs.prepare.result == 'failure' || 
          needs.validate.result == 'failure' || 
          needs.plan.result == 'failure' || 
          needs.apply.result == 'failure'
        run: |
          echo "::group::Notification"
          echo "❌ Workflow failed!"
          
          if [[ "${{ needs.prepare.result }}" == "failure" ]]; then
            echo "## ⚠️ Environment Preparation Failed"
          elif [[ "${{ needs.validate.result }}" == "failure" ]]; then
            echo "## ⚠️ Terraform Validation Failed"
          elif [[ "${{ needs.plan.result }}" == "failure" ]]; then
            echo "## ⚠️ Terraform Plan Failed"
          elif [[ "${{ needs.apply.result }}" == "failure" ]]; then
            echo "## ⚠️ Terraform Apply Failed"
          fi
          
          echo "Please check the logs for detailed error information."
          echo "Failure occurred at: $(date)"
          echo "::endgroup::"