name: Terraform-Apply-AWS-VPC-3-Subnets
on:
  workflow_run:
    workflows: ["Terraform-plan-aws-vpc-3subnets"]
    types:
      - completed
    branches:
      - main
  workflow_dispatch: {} # Added to enable manual triggering

permissions:
  id-token: write  # Required for AWS OIDC connection
  contents: read   # Required for actions/checkout

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TERRAFORM_VERSION: 1.11.0

jobs:
  # 1. First job: Verify the trigger workflow status
  verify-trigger:
    name: 'Verify Trigger Status'
    runs-on: ubuntu-latest
    outputs:
      trigger_status: ${{ github.event.workflow_run.conclusion || 'success' }}
      trigger_branch: ${{ github.event.workflow_run.head_branch || github.ref_name }}
    steps:
      - name: Print Trigger Details
        run: |
          if [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            echo "Triggered by workflow: ${{ github.event.workflow_run.name }}"
            echo "Workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
            echo "Workflow head branch: ${{ github.event.workflow_run.head_branch }}"
            echo "Workflow ID: ${{ github.event.workflow_run.id }}"
          else
            echo "Triggered manually via workflow_dispatch"
            echo "Current branch: ${{ github.ref_name }}"
          fi

  # 2. Main terraform apply job - Only run if the triggering workflow completed successfully or it was manually triggered
  terraform-apply:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    needs: verify-trigger
    if: needs.verify-trigger.outputs.trigger_status == 'success' || github.event_name == 'workflow_dispatch'
    steps:
      # 🔍 PREPARATION PHASE - Repository checkout and environment setup
      - name: 🔍 Checkout repository
        uses: actions/checkout@v4
        id: checkout
        with:
          ref: ${{ needs.verify-trigger.outputs.trigger_branch || github.ref }}
      
      - name: 🔧 Setup Terraform
        uses: hashicorp/setup-terraform@v2
        id: setup
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        id: aws-credentials
        with:
          role-to-assume: ${{ secrets.AWS_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-session-name: GitHubActions
      
      # 🚀 INITIALIZATION PHASE - Initialize and validate Terraform
      - name: 🚀 Initialize Terraform
        id: init
        working-directory: infrastructure
        run: |
          echo "::group::Terraform Initialization"
          echo "🔄 Starting Terraform initialization..."
          
          # Initialize with state migration enabled
          if terraform init -migrate-state; then
            echo "✅ Terraform initialization successful"
            echo "init_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Terraform initialization failed"
            echo "init_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"

      - name: 🔍 Validate Terraform Configuration
        id: validate
        working-directory: infrastructure
        if: steps.init.outputs.init_status == 'success'
        run: |
          echo "::group::Terraform Validation"
          echo "🔄 Validating Terraform configuration..."
          
          # Validate Terraform configuration
          if terraform validate; then
            echo "✅ Terraform validation successful"
            echo "validate_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Terraform validation failed"
            echo "validate_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"
      
      # 🔄 APPLY PHASE - Auto-approve the apply to implement the planned changes
      - name: 🔄 Apply Terraform Changes
        id: apply
        working-directory: infrastructure
        if: steps.validate.outputs.validate_status == 'success'
        run: |
          echo "::group::Terraform Apply"
          echo "🔄 Applying Terraform changes with auto-approval..."
          
          if terraform apply -auto-approve; then
            echo "✅ Terraform apply successful"
            echo "apply_status=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Terraform apply failed"
            echo "apply_status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi
          echo "::endgroup::"
      
      # 📢 NOTIFICATION PHASE - Notify about the application results
      - name: 📢 Notify on Success
        if: steps.apply.outputs.apply_status == 'success'
        run: |
          echo "::group::Notification"
          echo "✅ Infrastructure changes have been successfully applied!"
          
          # Get output summary for notification
          echo "## 🚀 Infrastructure Successfully Deployed"
          echo "The Terraform infrastructure has been successfully applied."
          echo "Deployment completed at: $(date)"
          echo "::endgroup::"
          
      - name: 📢 Notify on Failure
        if: steps.apply.outputs.apply_status == 'failure'
        run: |
          echo "::group::Notification"
          echo "❌ Infrastructure deployment failed!"
          echo "Please check the logs for more details."
          echo "::endgroup::"