name: Terraform-plan-aws-vpc-3subnets
on:
  push:
    branches:
      -
  pull_request:
    branches:
      -
  workflow_dispatch:  # Allow manual triggering

permissions:
  id-token: write # Required for AWS OIDC connection
  contents: read # Required for actions/checkout
  pull-requests: write # Required for GitHub bot to comment on PR
  issues: write # Required for posting plan results as issue comments
  actions: write # Required for triggering other workflows

env:
  TF_LOG: INFO
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TERRAFORM_VERSION: 1.11.0

jobs:
  terraform:
    name: 'Terraform Plan'
    runs-on: ubuntu-latest
    outputs:
      plan_status: ${{ steps.plan.outputs.plan_status }}
      plan_exitcode: ${{ steps.plan.outputs.plan_exitcode }}
    
    steps:
    # üîç PREPARATION PHASE - Repository checkout and environment setup
    - name: üîç Checkout repository
      uses: actions/checkout@v4
      id: checkout
    
    - name: üîß Setup Terraform
      uses: hashicorp/setup-terraform@v2
      id: setup
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      id: aws-credentials
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GitHubActions
    
    # üöÄ INITIALIZATION PHASE - Initialize and validate Terraform
    - name: üöÄ Initialize Terraform
      id: init
      working-directory: infrastructure
      run: |
        echo "::group::Terraform Initialization"
        echo "üîÑ Starting Terraform initialization..."
        
        # Initialize with state migration enabled
        if terraform init -migrate-state; then
          echo "‚úÖ Terraform initialization successful"
          echo "init_status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Terraform initialization failed"
          echo "init_status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "::endgroup::"

    - name: üîç Validate Terraform Configuration
      id: validate
      working-directory: infrastructure
      if: steps.init.outputs.init_status == 'success'
      run: |
        echo "::group::Terraform Validation"
        echo "üîÑ Validating Terraform configuration..."
        
        # Validate Terraform configuration
        if terraform validate; then
          echo "‚úÖ Terraform validation successful"
          echo "validate_status=success" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Terraform validation failed"
          echo "validate_status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi
        echo "::endgroup::"
    
    # üìù PLANNING PHASE - Generate and display plan
    - name: üìù Create Terraform Plan
      id: plan
      working-directory: infrastructure
      if: steps.validate.outputs.validate_status == 'success'
      run: |
        echo "::group::Terraform Plan Generation"
        echo "üîÑ Generating Terraform plan..."

        # Create plan directory
        mkdir -p ./plans

        # Run plan and capture output while also displaying it
        terraform plan -out=./plans/tfplan.binary -detailed-exitcode -input=false 2>&1 | tee ./plans/plan_output.txt
        PLAN_EXIT_CODE=${PIPESTATUS[0]}

        echo "‚úÖ Terraform plan generated with exit code: ${PLAN_EXIT_CODE}"
        echo "plan_status=success" >> $GITHUB_OUTPUT
        echo "plan_exitcode=${PLAN_EXIT_CODE}" >> $GITHUB_OUTPUT

        # Convert binary plan to JSON for easier parsing
        terraform show -json ./plans/tfplan.binary > ./plans/tfplan.json || echo "Warning: Unable to convert plan to JSON format"

        # Create human-readable summary
        echo "## Terraform Plan Summary" > ./plans/plan_summary.md
        echo "üìÖ Generated on: $(date)" >> ./plans/plan_summary.md
        echo "" >> ./plans/plan_summary.md

        # Count resources being added/changed/destroyed
        # Extract numbers from the "Plan: x to add, y to change, z to destroy" line
        PLAN_SUMMARY=$(grep "Plan:" ./plans/plan_output.txt | grep -o "Plan:.*" || echo "Plan: 0 to add, 0 to change, 0 to destroy.")
        RESOURCES_ADD=$(echo "$PLAN_SUMMARY" | grep -o "[0-9]\+ to add" | grep -o "[0-9]\+" || echo "0")
        RESOURCES_CHANGE=$(echo "$PLAN_SUMMARY" | grep -o "[0-9]\+ to change" | grep -o "[0-9]\+" || echo "0")
        RESOURCES_DESTROY=$(echo "$PLAN_SUMMARY" | grep -o "[0-9]\+ to destroy" | grep -o "[0-9]\+" || echo "0")

        echo "üü¢ Resources to add: ${RESOURCES_ADD}" >> ./plans/plan_summary.md
        echo "üü† Resources to change: ${RESOURCES_CHANGE}" >> ./plans/plan_summary.md
        echo "üî¥ Resources to destroy: ${RESOURCES_DESTROY}" >> ./plans/plan_summary.md
        echo "" >> ./plans/plan_summary.md

        # Also print the summary to the logs
        echo "::group::Terraform Plan Summary"
        echo "üü¢ Resources to add: ${RESOURCES_ADD}"
        echo "üü† Resources to change: ${RESOURCES_CHANGE}"
        echo "üî¥ Resources to destroy: ${RESOURCES_DESTROY}"
        echo "::endgroup::"

        echo "::endgroup::"
    
  

  # This new job will trigger the apply workflow after a successful plan
  trigger-apply:
    name: 'Trigger Apply Workflow'
    needs: terraform
    runs-on: ubuntu-latest
    # Only run if the terraform job succeeded - FIXED THIS CONDITION
    if: ${{ needs.terraform.outputs.plan_status == 'success' && github.event_name != 'pull_request' }}
    steps:
      - name: üöÄ Trigger Apply Workflow
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}  # Or use PAT_TOKEN if you need more permissions
          script: |
            console.log('Triggering Terraform Apply workflow...');
            
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'Terraform-Apply-AWS-VPC-3-Subnets.yml',
                ref: 'main'
              });
              
              console.log('‚úÖ Successfully triggered the apply workflow');
            } catch (error) {
              console.error('‚ùå Failed to trigger apply workflow:', error);
              core.setFailed(`Failed to trigger apply workflow: ${error.message}`);
            }
      
      - name: üì¢ Notify Trigger Success
        if: success()
        run: |
          echo "::group::Apply Workflow Triggered"
          echo "‚úÖ Successfully triggered the Terraform Apply workflow"
          echo "The apply workflow 'Terraform-Apply-AWS-VPC-3-Subnets' has been started"
          echo "::endgroup::"
      
      - name: üì¢ Notify Trigger Failure
        if: failure()
        run: |
          echo "::group::Apply Workflow Trigger Failed"
          echo "‚ùå Failed to trigger the Terraform Apply workflow"
          echo "Please check permissions and workflow configurations"
          echo "::endgroup::"